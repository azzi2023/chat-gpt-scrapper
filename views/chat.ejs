<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chat Interface</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --background-color: #f8fafc;
            --chat-bg: #ffffff;
            --message-user: #e0f2fe;
            --message-assistant: #f1f5f9;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            color: var(--text-primary);
            line-height: 1.5;
            min-height: 100vh;
        }

        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: var(--chat-bg);
        }

        .header {
            padding: 1.5rem;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .header-buttons {
            display: flex;
            gap: 0.75rem;
        }

        .button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
        }

        .export-button {
            background-color: #22c55e;
            color: white;
        }

        .export-button:hover {
            background-color: #16a34a;
        }

        .close-button {
            background-color: #ef4444;
            color: white;
        }

        .close-button:hover {
            background-color: #dc2626;
        }

        .chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .message {
            padding: 1rem;
            border-radius: 0.75rem;
            max-width: 80%;
            font-size: 0.875rem;
            line-height: 1.5;
        }

        .user-message {
            background-color: var(--message-user);
            margin-left: auto;
            border-bottom-right-radius: 0.25rem;
        }

        .assistant-message {
            background-color: var(--message-assistant);
            margin-right: auto;
            border-bottom-left-radius: 0.25rem;
        }

        .input-container {
            padding: 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }

        .input-wrapper {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        textarea {
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            resize: none;
            min-height: 24px;
            max-height: 200px;
            font-family: inherit;
            font-size: 0.875rem;
            line-height: 1.5;
        }

        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
        }

        .send-button {
            padding: 0.75rem 1.5rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        .send-button:hover {
            background-color: var(--secondary-color);
        }

        .loading {
            display: none;
            text-align: center;
            padding: 1rem;
            color: var(--text-secondary);
        }

        .loading.active {
            display: block;
        }

        .error {
            color: #ef4444;
            padding: 0.75rem;
            margin: 0.5rem 0;
            border-radius: 0.5rem;
            background-color: #fef2f2;
            display: none;
            font-size: 0.875rem;
        }

        .error.active {
            display: block;
        }

        /* Scrollbar styling */
        .chat-container::-webkit-scrollbar {
            width: 8px;
        }

        .chat-container::-webkit-scrollbar-track {
            background: var(--background-color);
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: var(--border-color);
            border-radius: 4px;
        }

        .chat-container::-webkit-scrollbar-thumb:hover {
            background: var(--text-secondary);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>AI Chat Interface</h1>
            <div class="header-buttons">
                <button class="button export-button" onclick="exportChat()">Export Chat</button>
                <button class="button close-button" onclick="closeChat()">Close Chat</button>
            </div>
        </div>
        <div class="chat-container" id="chatContainer"></div>
        <div class="loading" id="loading">Processing...</div>
        <div class="error" id="error"></div>
        <div class="input-container">
            <div class="input-wrapper">
                <textarea id="messageInput" placeholder="Type your message..." onkeydown="handleKeyPress(event)"></textarea>
            </div>
            <button class="send-button" onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        const chatContainer = document.getElementById('chatContainer');
        const messageInput = document.getElementById('messageInput');
        const loading = document.getElementById('loading');
        const error = document.getElementById('error');

        /**
         * Add a message to the chat container
         * @param {string} content - The content of the message
         * @param {boolean} isUser - Whether the message is from the user
         */
        function addMessage(content, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'assistant-message'}`;
            messageDiv.textContent = content;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        /**
         * Send a message to the chat
         */
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            // Add user message to chat
            addMessage(message, true);
            messageInput.value = '';
            loading.classList.add('active');
            error.classList.remove('active');

            try {
                const response = await fetch('/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message }),
                });

                const data = await response.json();
                if (data.success) {
                    addMessage(data.data.response);
                } else {
                    throw new Error(data.error);
                }
            } catch (err) {
                error.textContent = err.message;
                error.classList.add('active');
            } finally {
                loading.classList.remove('active');
            }
        }

        /**
         * Close the chat
         */
        async function closeChat() {
            try {
                const response = await fetch('/chat/close', {
                    method: 'POST',
                });
                const data = await response.json();
                if (data.success) {
                    window.location.href = '/';
                } else {
                    throw new Error(data.error);
                }
            } catch (err) {
                error.textContent = err.message;
                error.classList.add('active');
            }
        }

        /**
         * Export the chat
         */
        async function exportChat() {
            try {
                const response = await fetch('/chat/export');
                const data = await response.json();
                
                if (!data.success) {
                    // If the response is a JSON with error message
                    if (data.error) {
                        error.textContent = data.error;
                        error.classList.add('active');
                    } 
                }
                    
            } catch {
                window.location.href = '/chat/export';
            }
        }

        /**
         * Handle key press
         * @param {Event} event - The event object
         */
        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        /**
         * Auto-resize textarea
         */
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
    </script>
</body>
</html> 